{"version":3,"file":"static/js/10.dca5a2f6.chunk.js","mappings":"qSAMMA,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CAAEC,QAHI,sCAKHC,EAAkB,mCAAG,sGACTL,EAASM,IAAI,uBADJ,uBACxBC,EADwB,EACxBA,KADwB,kBAEzBA,GAFyB,2CAAH,qDAIlBC,EAAgB,mCAAG,WAAMC,GAAN,yFACPT,EAASM,IAAI,gBAAiB,CACnDH,OAAQ,CAAEM,MAAOA,KAFW,uBACtBF,EADsB,EACtBA,KADsB,kBAIvBA,GAJuB,2CAAH,sDAMhBG,EAAc,mCAAG,WAAMC,GAAN,yFACLX,EAASM,IAAT,iBAAuBK,IADlB,uBACpBJ,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,sDAIdK,EAAiB,mCAAG,WAAMD,GAAN,yFACRX,EAASM,IAAT,iBAAuBK,EAAvB,aADQ,uBACvBJ,EADuB,EACvBA,KADuB,kBAExBA,EAAKM,MAFmB,2CAAH,sDAIjBC,EAAiB,mCAAG,WAAMH,GAAN,yFACRX,EAASM,IAAT,iBAAuBK,EAAvB,aADQ,uBACvBJ,EADuB,EACvBA,KADuB,kBAExBA,EAAKQ,SAFmB,2CAAH,qD,qFC4D9B,UA7EwB,SAAC,GAAc,EAAZC,OAAa,IAAD,IACnC,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACDE,GAAWC,EAAAA,EAAAA,MAETC,EAA2DN,EAA3DM,MAAOC,EAAoDP,EAApDO,aAAcC,EAAsCR,EAAtCQ,aAAcC,EAAwBT,EAAxBS,OAAQC,EAAgBV,EAAhBU,aAEpDC,EAAAA,EAAAA,YAAU,WACRC,QAAQC,IAAI,gBAAiBX,IAC7BV,EAAAA,EAAAA,IAAeU,GAASY,MAAK,SAAAzB,GAEzBY,EAASZ,EACV,IACA0B,OAAM,SAACC,GACNJ,QAAQC,IAAIG,GACb,IAAIC,MAAMD,EACV,GACJ,GAAE,CAACd,IAWH,IAAMgB,EAAY,oBAAGd,EAASe,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IAC9C,OACA,iCACA,SAAC,KAAD,CAAMC,GAAIH,EAAV,SAAyB,aAGrB,4BACE,gBAAKI,IAAG,yCAAsCZ,GAC5Ca,IAAI,YAER,4BACE,4BACE,0BACGjB,EAAM,KAAG,IAAIkB,KAAKhB,GAAciB,cAAc,QAEjD,yBAAG,eAAaC,KAAKC,MAAqB,GAAfpB,GAAmB,SAC9C,wBAAI,cACJ,uBAAIP,EAAM4B,YACV,wBAAI,WACHnB,GAAUT,EAAMS,OAAOoB,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,UAExD,4BACE,wBAAI,4BACJ,2BACE,yBACE,SAAC,KAAD,CACEX,GAAG,OACHF,MAAO,CAAEC,KAAMF,GAFjB,SAEkC,YAIpC,yBACE,SAAC,KAAD,CACEG,GAAG,UACHF,MAAO,CAAEC,KAAMF,GAFjB,SAIC,2BAQX,SAAC,KAAD,MAGL,C","sources":["FetchApi/FetchApi.jsx","Pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\n\n\n\nconst API_KEY = 'e7147536b3f6e7e0e6ccf2ca27080ce3';\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: { api_key: API_KEY },\n});\nexport const fetchPopularMovies = async () => {\n  const { data } = await instance.get('/trending/movie/day');\n  return data;\n};\nexport const fetchSearchMovie = async query => {\n  const { data } = await instance.get('/search/movie', {\n    params: { query: query },\n  });\n  return data;\n};\nexport const fetchMovieById = async id => {\n  const { data } = await instance.get(`/movie/${id}`);\n  return data;\n};\nexport const fetchMovieCredits = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  return data.cast;\n};\nexport const fetchMovieReviews = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n  return data.results;\n};","\nimport { useEffect, useState } from 'react';\n// import {fetchMovieById } from '../../FetchApi/FetchApi'\nimport { Link,Outlet,useParams,useLocation} from 'react-router-dom';\n// import Loader from 'components/Loader/loader';\nimport { fetchMovieById } from '../../FetchApi/FetchApi';\n// import { Suspense } from 'react';\n\n//  const { title, tagline, poster_path, overview, genres,release_date } = movie;\n \n\n   const MovieDetails = ({ movies}) => {\n    const [movie, setMovie] = useState([]);\n    const { movieId } = useParams();\n     const location = useLocation();\n     \n     const { title, vote_average, release_date, genres, poster_path } = movie;\n     \n    useEffect(() => {\n      console.log('Fetching  id:', movieId);\n      fetchMovieById(movieId).then(data => {\n          // const data = response.data;\n          setMovie(data);\n        })\n        .catch((error) => {\n          console.log(error);\n         new Error(error)\n        });\n    }, [movieId]);\n     \n  //  useEffect(() => {\n  //   fetchMovieById(movieId).then(data => setMovie(data));\n  // }, [movieId]);\n \n    // if (!movieId) {\n    //   return <Loader />;\n    // }\n    \n    \n     const backLinkHref = location.state?.from ?? '/';\n    return (\n    <>\n    <Link to={backLinkHref} >\n        Go Back\n      </Link>\n        <div>\n          <img src = {`https://image.tmdb.org/t/p/w300${poster_path}`}\n            alt=\"poster\"\n          />\n        <div >\n          <div>\n            <h2>\n              {title} ({new Date(release_date).getFullYear()})\n            </h2>\n            <p>User Score: {Math.round(vote_average * 10)} %</p>\n            <h3>Overview</h3>\n            <p>{movie.overview}</p>\n            <h3>Genres</h3>\n            {genres && movie.genres.map(genre => genre.name).join(', ')}\n          </div>\n          <div >\n            <h3>Additional information</h3>\n            <ul >\n              <li>\n                <Link\n                  to=\"cast\"\n                  state={{ from: backLinkHref }} >\n                  Cast\n                </Link>\n              </li>\n              <li>\n                <Link\n                  to=\"reviews\"\n                  state={{ from: backLinkHref }}\n                  \n                >\n                  Reviews\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n      <Outlet />\n    </>\n  );\n};\n\nexport default MovieDetails;\n    "],"names":["instance","axios","baseURL","params","api_key","fetchPopularMovies","get","data","fetchSearchMovie","query","fetchMovieById","id","fetchMovieCredits","cast","fetchMovieReviews","results","movies","useState","movie","setMovie","movieId","useParams","location","useLocation","title","vote_average","release_date","genres","poster_path","useEffect","console","log","then","catch","error","Error","backLinkHref","state","from","to","src","alt","Date","getFullYear","Math","round","overview","map","genre","name","join"],"sourceRoot":""}